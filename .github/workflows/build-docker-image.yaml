name: Build docker image

on:
  workflow_dispatch:

jobs:
  build:
    name: Checkout and build Docker image
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      #
      # Github Artifact Attestations
      #

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      #
      # Notary V2 / Notation
      #

      - name: Setup Notation CLI
        uses: notaryproject/notation-action/setup@v1
        with:
          version: "1.3.1"

      - name: Sign using notation
        run: |
          set -eu

          notation cert generate-test --default testkey.io

          # can also use --signature-format=cose here
          notation sign \
            --force-referrers-tag=false \
            ghcr.io/${{ github.repository }}@${{ steps.push.outputs.digest }}

      #
      # Sigstore / Cosign
      #

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: 'v2.5.0'

      - name: Sign using cosign
        run: |
          set -eu

          image=ghcr.io/${{ github.repository }}@${{ steps.push.outputs.digest }}

          docker buildx imagetools inspect $image \
            --format "{{json .Provenance.SLSA}}" > provenance.json

          # generate a dummy key pair and a self-signed CA
          openssl ecparam -out ecparam.pem -name prime256v1
          openssl genpkey -paramfile ecparam.pem -out openssl.key
          openssl req -rand /dev/random -new -days 365 -nodes -x509 \
            -subj "/C=CC/ST=ST/L=l/O=o/CN=www.example.com" \
            -key openssl.key -out cosign.cert

          cosign import-key-pair --key openssl.key --output-key-prefix=cosign

          cosign attest \
            --tlog-upload=false --new-bundle-format=true \
            --predicate provenance.json --type slsaprovenance02 \
            --key cosign.key --certificate cosign.cert \
            $image

          # cosign sign -y --key cosign.key $image
          # ..is pretty much equivalent except it doesn't upload as OCI artifact
          #   but rather as a new tag attachment with ".sig" extension. The same
          #   provenance data is included in the signed digest but need to be
          #   fetched through the image index instead the referrers API.
        env:
          COSIGN_PASSWORD: insecure



